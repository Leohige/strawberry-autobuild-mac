name: Build
on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'
    
permissions:
  contents: write

jobs:
  build-macos-public:
    name: Build macOS Public
    if: github.repository != 'strawberrymusicplayer/strawberry-private' && github.ref != 'refs/heads/l10n_master'

    strategy:
      fail-fast: false
      matrix:
        runner: [ 'macos-13', 'macos-15' ]
        buildtype: [ 'release' ]

    runs-on: ${{ matrix.runner }}

    steps:

      - name: Set MACOSX_DEPLOYMENT_TARGET
        run: |
          for i in 12 13 14 15; do
            if [ -d "/Library/Developer/CommandLineTools/SDKs/MacOSX${i}.sdk" ]; then
              echo "Using macOS SDK ${i}"
              echo "MACOSX_DEPLOYMENT_TARGET=${i}.0" >> $GITHUB_ENV
              break
            fi
          done

      - name: Verify MACOSX_DEPLOYMENT_TARGET
        run: |
          test "${MACOSX_DEPLOYMENT_TARGET}" = "" && false || echo "MACOSX_DEPLOYMENT_TARGET: ${MACOSX_DEPLOYMENT_TARGET}"

      - name: Set arch
        shell: bash
        run: echo "arch=$(uname -m)" >> $GITHUB_ENV

      - name: Set buildtype
        run: echo "buildtype=$(echo ${{matrix.buildtype}} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set cmake buildtype
        run: echo "cmake_buildtype=$(echo ${{env.buildtype}} | awk '{print toupper(substr($0,0,1))tolower(substr($0,2))}')" >> $GITHUB_ENV

      - name: Uninstall homebrew
        run: |
          curl -sfLO https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh
          chmod +x ./uninstall.sh
          sudo ./uninstall.sh --force
          rm -f uninstall.sh

      - name: Checkout strawberrymusicplayer/strawberry
        uses: actions/checkout@v5
        with:
          repository: strawberrymusicplayer/strawberry
          fetch-depth: 0
          submodules: recursive

      - name: Download macOS dependencies
        run: curl -f -O -L https://github.com/strawberrymusicplayer/strawberry-macos-dependencies/releases/latest/download/strawberry-macos-${{env.arch}}-${{env.buildtype}}.tar.xz

      - name: Extract macOS dependencies
        run: sudo tar -C / -xf strawberry-macos-${{env.arch}}-${{env.buildtype}}.tar.xz

      - name: Set prefix path
        run: echo "prefix_path=/opt/strawberry_macos_${{env.arch}}_${{env.buildtype}}" >> $GITHUB_ENV

      - name: Update PATH
        run: echo "${{env.prefix_path}}/bin" >> $GITHUB_PATH

      - name: Create Build Environment
        run: cmake -E make_directory build

      - name: Configure CMake
        env:
          PKG_CONFIG_PATH: ${{env.prefix_path}}/lib/pkgconfig
          LDFLAGS: -L${{env.prefix_path}}/lib -Wl,-rpath,${{env.prefix_path}}/lib
        run: >
          cmake
          --log-level="DEBUG"
          -S .
          -B build
          -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}"
          -DCMAKE_PREFIX_PATH="${{env.prefix_path}}/lib/cmake"
          -DBUILD_WERROR=ON
          -DUSE_BUNDLE=ON
          -DICU_ROOT="${{env.prefix_path}}"
          -DAPPLE_DEVELOPER_ID=""
          -DARCH="${{env.arch}}"
          -DENABLE_SPOTIFY=$(test -f "${{env.prefix_path}}/lib/gstreamer-1.0/libgstspotify.dylib" && echo "ON" || echo "OFF")
          -DENABLE_SPARKLE=ON
          -DENABLE_QTSPARKLE=OFF

      - name: Build
        run: cmake --build build --config Release --parallel 4

      - name: Install
        working-directory: build
        run: make install

      - name: Deploy
        env:
          GIO_EXTRA_MODULES: ${{env.prefix_path}}/lib/gio/modules
          GST_PLUGIN_SCANNER: ${{env.prefix_path}}/libexec/gstreamer-1.0/gst-plugin-scanner
          GST_PLUGIN_PATH: ${{env.prefix_path}}/lib/gstreamer-1.0
          LIBSOUP_LIBRARY_PATH: ${{env.prefix_path}}/lib/libsoup-3.0.0.dylib
        run: make -C build deploy

      - name: Deploy check
        working-directory: build
        run: make deploycheck

      - name: Cleanup before DMG creation
        run: |
          hdiutil detach /Volumes/Strawberry* 2>/dev/null || true
          rm -f build/*.dmg 2>/dev/null || true
          sleep 2

      - name: Create DMG
        working-directory: build
        run: |
          for i in {1..3}; do
            if make dmg; then
              echo "DMG created successfully"
              exit 0
            else
              echo "DMG creation failed, attempt $i/3"
              hdiutil detach /Volumes/Strawberry* 2>/dev/null || true
              sleep 5
            fi
          done
          echo "Failed to create DMG after 3 attempts"
          exit 1

      - name: Upload DMG as artifact
        uses: actions/upload-artifact@v4
        with:
          name: strawberry-macos-${{ matrix.runner }}-${{ matrix.buildtype }}
          path: build/*.dmg

  create-release:
    name: Create Release
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    needs: build-macos-public
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version
        id: get-version
        run: |
          VERSION="daily-build-$(date +'%Y-%m-%d')"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          
          # Delete existing release with same tag if it exists
          gh release delete "${VERSION}" --yes 2>/dev/null || true
          git push --delete origin "${VERSION}" 2>/dev/null || true
          
          # Create new release
          gh release create "${VERSION}" \
            --title "Daily Build $(date +'%Y-%m-%d')" \
            --notes "Automated macOS builds
          
          **Builds:**
          - Intel (x86_64)
          - Apple Silicon (arm64)
          
          **Note:** Unsigned builds for testing." \
            artifacts/*/*.dmg

      - name: Cleanup old releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Delete releases older than 30 days
          CUTOFF_DATE=$(date -u -d '30 days ago' '+%Y-%m-%d' 2>/dev/null || date -u -v-30d '+%Y-%m-%d')
          
          gh release list --limit 100 | while read -r line; do
            tag=$(echo "$line" | awk '{print $1}')
            
            # Only process daily-build releases
            if [[ "$tag" =~ ^daily-build-([0-9]{4}-[0-9]{2}-[0-9]{2})$ ]]; then
              release_date="${BASH_REMATCH[1]}"
              
              # Compare dates
              if [[ "$release_date" < "$CUTOFF_DATE" ]]; then
                echo "Deleting old release: ${tag} (${release_date})"
                gh release delete "${tag}" --yes
                git push --delete origin "${tag}" 2>/dev/null || true
              fi
            fi
          done
